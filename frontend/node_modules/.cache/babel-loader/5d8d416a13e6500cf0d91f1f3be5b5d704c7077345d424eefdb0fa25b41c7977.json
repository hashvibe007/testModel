{"ast":null,"code":"var _jsxFileName = \"/home/vibhash/Documents/ERA/Assigment5/frontend/src/components/TrainingConfig.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Paper, TextField, Button, Select, MenuItem, FormControl, InputLabel, Box, Typography, Alert } from '@mui/material';\nimport { trainModel } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrainingConfig = ({\n  networkLayers,\n  setTrainingResults,\n  isTraining,\n  setIsTraining\n}) => {\n  _s();\n  const [optimizer, setOptimizer] = useState('adam');\n  const [learningRate, setLearningRate] = useState(0.001);\n  const [epochs, setEpochs] = useState(10);\n  const [error, setError] = useState(null);\n  const validateNetwork = () => {\n    if (networkLayers.length === 0) {\n      return \"Please add at least one layer to the network\";\n    }\n\n    // Check if the last layer is Dense with appropriate units for MNIST (10 classes)\n    const lastLayer = networkLayers[networkLayers.length - 1];\n    if (lastLayer.type !== 'Fully Connected' || lastLayer.defaultParams.units !== 10) {\n      return \"The last layer must be a Fully Connected layer with 10 units for MNIST classification\";\n    }\n    return null;\n  };\n  const handleSubmit = async () => {\n    try {\n      const networkError = validateNetwork();\n      if (networkError) {\n        setError(networkError);\n        return;\n      }\n      setIsTraining(true);\n      setError(null);\n      const config = {\n        network_architecture: networkLayers.map(layer => ({\n          type: layer.type,\n          params: layer.defaultParams\n        })),\n        optimizer,\n        learning_rate: learningRate,\n        epochs\n      };\n      const results = await trainModel(config);\n      setTrainingResults(results);\n      setError(null);\n    } catch (err) {\n      setError(\"Training failed: \" + err.message);\n      console.error('Training failed:', err);\n    } finally {\n      setIsTraining(false);\n    }\n  };\n\n  // Clear error when parameters change\n  const handleParameterChange = paramSetter => event => {\n    setError(null);\n    paramSetter(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 3,\n      mb: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Training Configuration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      sx: {\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        children: \"Optimizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        value: optimizer,\n        onChange: e => setOptimizer(e.target.value),\n        label: \"Optimizer\",\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"adam\",\n          children: \"Adam\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"sgd\",\n          children: \"SGD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      label: \"Learning Rate\",\n      type: \"number\",\n      value: learningRate,\n      onChange: e => setLearningRate(parseFloat(e.target.value)),\n      sx: {\n        mb: 2\n      },\n      inputProps: {\n        min: 0.0001,\n        step: 0.0001\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      label: \"Epochs\",\n      type: \"number\",\n      value: epochs,\n      onChange: e => setEpochs(parseInt(e.target.value)),\n      sx: {\n        mb: 2\n      },\n      inputProps: {\n        min: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: handleSubmit,\n      disabled: isTraining || error !== null || networkLayers.length === 0,\n      fullWidth: true,\n      children: isTraining ? 'Training...' : 'Start Training'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(TrainingConfig, \"hvJZT9pZZYd6sjKrk1jQmK+8us4=\");\n_c = TrainingConfig;\nexport default TrainingConfig;\nvar _c;\n$RefreshReg$(_c, \"TrainingConfig\");","map":{"version":3,"names":["React","useState","Paper","TextField","Button","Select","MenuItem","FormControl","InputLabel","Box","Typography","Alert","trainModel","jsxDEV","_jsxDEV","TrainingConfig","networkLayers","setTrainingResults","isTraining","setIsTraining","_s","optimizer","setOptimizer","learningRate","setLearningRate","epochs","setEpochs","error","setError","validateNetwork","length","lastLayer","type","defaultParams","units","handleSubmit","networkError","config","network_architecture","map","layer","params","learning_rate","results","err","message","console","handleParameterChange","paramSetter","event","target","value","sx","p","mb","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","severity","fullWidth","onChange","e","label","parseFloat","inputProps","min","step","parseInt","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/vibhash/Documents/ERA/Assigment5/frontend/src/components/TrainingConfig.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Paper,\n  TextField,\n  Button,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Box,\n  Typography,\n  Alert\n} from '@mui/material';\nimport { trainModel } from '../services/api';\n\nconst TrainingConfig = ({ networkLayers, setTrainingResults, isTraining, setIsTraining }) => {\n  const [optimizer, setOptimizer] = useState('adam');\n  const [learningRate, setLearningRate] = useState(0.001);\n  const [epochs, setEpochs] = useState(10);\n  const [error, setError] = useState(null);\n\n  const validateNetwork = () => {\n    if (networkLayers.length === 0) {\n      return \"Please add at least one layer to the network\";\n    }\n    \n    // Check if the last layer is Dense with appropriate units for MNIST (10 classes)\n    const lastLayer = networkLayers[networkLayers.length - 1];\n    if (lastLayer.type !== 'Fully Connected' || lastLayer.defaultParams.units !== 10) {\n      return \"The last layer must be a Fully Connected layer with 10 units for MNIST classification\";\n    }\n\n    return null;\n  };\n\n  const handleSubmit = async () => {\n    try {\n      const networkError = validateNetwork();\n      if (networkError) {\n        setError(networkError);\n        return;\n      }\n\n      setIsTraining(true);\n      setError(null);\n\n      const config = {\n        network_architecture: networkLayers.map(layer => ({\n          type: layer.type,\n          params: layer.defaultParams\n        })),\n        optimizer,\n        learning_rate: learningRate,\n        epochs\n      };\n\n      const results = await trainModel(config);\n      setTrainingResults(results);\n      setError(null);\n    } catch (err) {\n      setError(\"Training failed: \" + err.message);\n      console.error('Training failed:', err);\n    } finally {\n      setIsTraining(false);\n    }\n  };\n\n  // Clear error when parameters change\n  const handleParameterChange = (paramSetter) => (event) => {\n    setError(null);\n    paramSetter(event.target.value);\n  };\n\n  return (\n    <Paper sx={{ p: 3, mb: 3 }}>\n      <Typography variant=\"h6\" gutterBottom>\n        Training Configuration\n      </Typography>\n      \n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      <FormControl fullWidth sx={{ mb: 2 }}>\n        <InputLabel>Optimizer</InputLabel>\n        <Select\n          value={optimizer}\n          onChange={(e) => setOptimizer(e.target.value)}\n          label=\"Optimizer\"\n        >\n          <MenuItem value=\"adam\">Adam</MenuItem>\n          <MenuItem value=\"sgd\">SGD</MenuItem>\n        </Select>\n      </FormControl>\n\n      <TextField\n        fullWidth\n        label=\"Learning Rate\"\n        type=\"number\"\n        value={learningRate}\n        onChange={(e) => setLearningRate(parseFloat(e.target.value))}\n        sx={{ mb: 2 }}\n        inputProps={{ min: 0.0001, step: 0.0001 }}\n      />\n\n      <TextField\n        fullWidth\n        label=\"Epochs\"\n        type=\"number\"\n        value={epochs}\n        onChange={(e) => setEpochs(parseInt(e.target.value))}\n        sx={{ mb: 2 }}\n        inputProps={{ min: 1 }}\n      />\n\n      <Button\n        variant=\"contained\"\n        onClick={handleSubmit}\n        disabled={isTraining || error !== null || networkLayers.length === 0}\n        fullWidth\n      >\n        {isTraining ? 'Training...' : 'Start Training'}\n      </Button>\n    </Paper>\n  );\n};\n\nexport default TrainingConfig; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}