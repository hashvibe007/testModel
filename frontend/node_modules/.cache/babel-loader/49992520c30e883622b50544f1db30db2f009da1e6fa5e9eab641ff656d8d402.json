{"ast":null,"code":"var _jsxFileName = \"/home/vibhash/Documents/ERA/Assigment5/frontend/src/components/NetworkBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Paper, Typography, Box } from '@mui/material';\nimport LayerCard from './LayerCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateLayerDimensions = layers => {\n  let dimensions = [];\n  let inputChannels = 1; // MNIST input channels\n  let currentHeight = 28; // MNIST input height\n  let currentWidth = 28; // MNIST input width\n\n  layers.forEach((layer, index) => {\n    let inputDim = [inputChannels, currentHeight, currentWidth];\n    let outputDim = [...inputDim];\n    let params = 0;\n    if (layer.type === 'Convolution 2D') {\n      // Update output dimensions\n      outputDim[0] = layer.defaultParams.filters;\n      outputDim[1] = Math.floor((currentHeight + 2 * layer.defaultParams.padding - layer.defaultParams.kernelSize) / layer.defaultParams.stride + 1);\n      outputDim[2] = Math.floor((currentWidth + 2 * layer.defaultParams.padding - layer.defaultParams.kernelSize) / layer.defaultParams.stride + 1);\n\n      // Calculate parameters\n      params = layer.defaultParams.kernelSize * layer.defaultParams.kernelSize * inputChannels * layer.defaultParams.filters + layer.defaultParams.filters;\n\n      // Update for next layer\n      inputChannels = layer.defaultParams.filters;\n      currentHeight = outputDim[1];\n      currentWidth = outputDim[2];\n    } else if (layer.type === 'Max Pooling') {\n      outputDim[1] = Math.floor(currentHeight / layer.defaultParams.stride);\n      outputDim[2] = Math.floor(currentWidth / layer.defaultParams.stride);\n      currentHeight = outputDim[1];\n      currentWidth = outputDim[2];\n    } else if (layer.type === 'Flatten') {\n      outputDim = [inputChannels * currentHeight * currentWidth];\n      currentHeight = 1;\n      currentWidth = 1;\n      inputChannels = outputDim[0];\n    } else if (layer.type === 'Dropout') {\n      // Dimensions remain the same\n      outputDim = [...inputDim];\n    } else if (layer.type === 'Fully Connected') {\n      let inputSize;\n      if (currentHeight > 1 || currentWidth > 1) {\n        inputSize = inputChannels * currentHeight * currentWidth;\n        inputDim = [inputSize];\n      } else {\n        inputSize = inputChannels;\n      }\n      outputDim = [layer.defaultParams.units];\n      params = inputSize * layer.defaultParams.units + layer.defaultParams.units;\n      inputChannels = layer.defaultParams.units;\n      currentHeight = 1;\n      currentWidth = 1;\n    }\n    dimensions.push({\n      input: inputDim,\n      output: outputDim,\n      params: params\n    });\n  });\n  return dimensions;\n};\nconst NetworkBuilder = ({\n  layers,\n  onLayerUpdate,\n  onLayerDelete\n}) => {\n  _s();\n  const [totalParams, setTotalParams] = useState(0);\n  const [layerDimensions, setLayerDimensions] = useState([]);\n  useEffect(() => {\n    const dimensions = calculateLayerDimensions(layers);\n    setLayerDimensions(dimensions);\n    setTotalParams(dimensions.reduce((sum, dim) => sum + dim.params, 0));\n    const params = calculateModelParams(layers);\n    setTotalParams(params);\n  }, [layers]);\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Network Architecture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"text.secondary\",\n        children: [\"Total Parameters: \", totalParams.toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        minHeight: 200,\n        p: 2,\n        backgroundColor: '#f8f8f8'\n      },\n      children: [layers.map((layer, index) => /*#__PURE__*/_jsxDEV(LayerCard, {\n        layer: layer,\n        onDelete: () => onLayerDelete(index),\n        onUpdate: params => onLayerUpdate(index, params)\n      }, layer.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)), layers.length === 0 && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        textAlign: \"center\",\n        py: 4,\n        children: \"Drag and drop layers here to build your network\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(NetworkBuilder, \"M/ztbOgx2CCi1cQquND01SANdGI=\");\n_c = NetworkBuilder;\nexport default NetworkBuilder;\nvar _c;\n$RefreshReg$(_c, \"NetworkBuilder\");","map":{"version":3,"names":["React","useEffect","useState","Paper","Typography","Box","LayerCard","jsxDEV","_jsxDEV","calculateLayerDimensions","layers","dimensions","inputChannels","currentHeight","currentWidth","forEach","layer","index","inputDim","outputDim","params","type","defaultParams","filters","Math","floor","padding","kernelSize","stride","inputSize","units","push","input","output","NetworkBuilder","onLayerUpdate","onLayerDelete","_s","totalParams","setTotalParams","layerDimensions","setLayerDimensions","reduce","sum","dim","calculateModelParams","sx","p","children","display","justifyContent","alignItems","mb","variant","fileName","_jsxFileName","lineNumber","columnNumber","color","toLocaleString","minHeight","backgroundColor","map","onDelete","onUpdate","id","length","textAlign","py","_c","$RefreshReg$"],"sources":["/home/vibhash/Documents/ERA/Assigment5/frontend/src/components/NetworkBuilder.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Paper, Typography, Box } from '@mui/material';\nimport LayerCard from './LayerCard';\n\nconst calculateLayerDimensions = (layers) => {\n  let dimensions = [];\n  let inputChannels = 1;  // MNIST input channels\n  let currentHeight = 28; // MNIST input height\n  let currentWidth = 28;  // MNIST input width\n\n  layers.forEach((layer, index) => {\n    let inputDim = [inputChannels, currentHeight, currentWidth];\n    let outputDim = [...inputDim];\n    let params = 0;\n\n    if (layer.type === 'Convolution 2D') {\n      // Update output dimensions\n      outputDim[0] = layer.defaultParams.filters;\n      outputDim[1] = Math.floor(\n        (currentHeight + 2*layer.defaultParams.padding - layer.defaultParams.kernelSize) / \n        layer.defaultParams.stride + 1\n      );\n      outputDim[2] = Math.floor(\n        (currentWidth + 2*layer.defaultParams.padding - layer.defaultParams.kernelSize) / \n        layer.defaultParams.stride + 1\n      );\n      \n      // Calculate parameters\n      params = (layer.defaultParams.kernelSize * layer.defaultParams.kernelSize * \n                inputChannels * layer.defaultParams.filters) + layer.defaultParams.filters;\n      \n      // Update for next layer\n      inputChannels = layer.defaultParams.filters;\n      currentHeight = outputDim[1];\n      currentWidth = outputDim[2];\n    } \n    else if (layer.type === 'Max Pooling') {\n      outputDim[1] = Math.floor(currentHeight / layer.defaultParams.stride);\n      outputDim[2] = Math.floor(currentWidth / layer.defaultParams.stride);\n      \n      currentHeight = outputDim[1];\n      currentWidth = outputDim[2];\n    }\n    else if (layer.type === 'Flatten') {\n      outputDim = [inputChannels * currentHeight * currentWidth];\n      currentHeight = 1;\n      currentWidth = 1;\n      inputChannels = outputDim[0];\n    }\n    else if (layer.type === 'Dropout') {\n      // Dimensions remain the same\n      outputDim = [...inputDim];\n    }\n    else if (layer.type === 'Fully Connected') {\n      let inputSize;\n      if (currentHeight > 1 || currentWidth > 1) {\n        inputSize = inputChannels * currentHeight * currentWidth;\n        inputDim = [inputSize];\n      } else {\n        inputSize = inputChannels;\n      }\n      outputDim = [layer.defaultParams.units];\n      params = (inputSize * layer.defaultParams.units) + layer.defaultParams.units;\n      \n      inputChannels = layer.defaultParams.units;\n      currentHeight = 1;\n      currentWidth = 1;\n    }\n\n    dimensions.push({\n      input: inputDim,\n      output: outputDim,\n      params: params\n    });\n  });\n\n  return dimensions;\n};\n\nconst NetworkBuilder = ({ layers, onLayerUpdate, onLayerDelete }) => {\n  const [totalParams, setTotalParams] = useState(0);\n  const [layerDimensions, setLayerDimensions] = useState([]);\n\n  useEffect(() => {\n    const dimensions = calculateLayerDimensions(layers);\n    setLayerDimensions(dimensions);\n    setTotalParams(dimensions.reduce((sum, dim) => sum + dim.params, 0));\n    const params = calculateModelParams(layers);\n    setTotalParams(params);\n  }, [layers]);\n\n  return (\n    <Paper sx={{ p: 2 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h6\">\n          Network Architecture\n        </Typography>\n        <Typography variant=\"subtitle1\" color=\"text.secondary\">\n          Total Parameters: {totalParams.toLocaleString()}\n        </Typography>\n      </Box>\n      <Box sx={{ minHeight: 200, p: 2, backgroundColor: '#f8f8f8' }}>\n        {layers.map((layer, index) => (\n          <LayerCard\n            key={layer.id}\n            layer={layer}\n            onDelete={() => onLayerDelete(index)}\n            onUpdate={(params) => onLayerUpdate(index, params)}\n          />\n        ))}\n        {layers.length === 0 && (\n          <Typography variant=\"body2\" color=\"text.secondary\" textAlign=\"center\" py={4}>\n            Drag and drop layers here to build your network\n          </Typography>\n        )}\n      </Box>\n    </Paper>\n  );\n};\n\nexport default NetworkBuilder; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}