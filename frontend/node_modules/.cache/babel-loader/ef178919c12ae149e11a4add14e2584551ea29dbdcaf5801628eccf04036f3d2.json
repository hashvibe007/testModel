{"ast":null,"code":"var _jsxFileName = \"/home/vibhash/Documents/ERA/Assigment5/frontend/src/components/NetworkBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Paper, Typography, Box } from '@mui/material';\nimport LayerCard from './LayerCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateLayerDimensions = layers => {\n  let dimensions = [];\n  let inputChannels = 1; // MNIST input channels\n  let currentHeight = 28; // MNIST input height\n  let currentWidth = 28; // MNIST input width\n\n  layers.forEach((layer, index) => {\n    let inputDim = [inputChannels, currentHeight, currentWidth];\n    let outputDim = [...inputDim];\n    if (layer.type === 'Convolution 2D') {\n      // Parameters in Conv layer = (kernel_size * kernel_size * in_channels * filters) + filters(bias)\n      const kernelParams = layer.defaultParams.kernelSize * layer.defaultParams.kernelSize * inputChannels * layer.defaultParams.filters;\n      const biasParams = layer.defaultParams.filters;\n      totalParams += kernelParams + biasParams;\n\n      // Update for next layer\n      inputChannels = layer.defaultParams.filters;\n      currentSize = Math.floor((currentSize + 2 * layer.defaultParams.padding - layer.defaultParams.kernelSize) / layer.defaultParams.stride + 1);\n    } else if (layer.type === 'Max Pooling') {\n      // No parameters in pooling layer\n      currentSize = Math.floor(currentSize / layer.defaultParams.stride);\n    } else if (layer.type === 'Dropout') {\n      // No parameters in dropout layer\n    } else if (layer.type === 'Fully Connected') {\n      let inputSize;\n      if (index === 0 || !layers[index - 1].type.includes('Fully Connected')) {\n        // First FC layer after conv/pool layers or at start\n        inputSize = inputChannels * currentSize * currentSize;\n      } else {\n        // FC layer after another FC layer\n        inputSize = layers[index - 1].defaultParams.units;\n      }\n      // Parameters in FC layer = (input_size * units) + units(bias)\n      totalParams += inputSize * layer.defaultParams.units + layer.defaultParams.units;\n    }\n  });\n  return totalParams;\n};\nconst NetworkBuilder = ({\n  layers,\n  onLayerUpdate,\n  onLayerDelete\n}) => {\n  _s();\n  const [totalParams, setTotalParams] = useState(0);\n  useEffect(() => {\n    const params = calculateModelParams(layers);\n    setTotalParams(params);\n  }, [layers]);\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Network Architecture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        color: \"text.secondary\",\n        children: [\"Total Parameters: \", totalParams.toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        minHeight: 200,\n        p: 2,\n        backgroundColor: '#f8f8f8'\n      },\n      children: [layers.map((layer, index) => /*#__PURE__*/_jsxDEV(LayerCard, {\n        layer: layer,\n        onDelete: () => onLayerDelete(index),\n        onUpdate: params => onLayerUpdate(index, params)\n      }, layer.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)), layers.length === 0 && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        textAlign: \"center\",\n        py: 4,\n        children: \"Drag and drop layers here to build your network\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(NetworkBuilder, \"3TkSY/FzRaGGoY7C6VrY47IAcn8=\");\n_c = NetworkBuilder;\nexport default NetworkBuilder;\nvar _c;\n$RefreshReg$(_c, \"NetworkBuilder\");","map":{"version":3,"names":["React","useEffect","useState","Paper","Typography","Box","LayerCard","jsxDEV","_jsxDEV","calculateLayerDimensions","layers","dimensions","inputChannels","currentHeight","currentWidth","forEach","layer","index","inputDim","outputDim","type","kernelParams","defaultParams","kernelSize","filters","biasParams","totalParams","currentSize","Math","floor","padding","stride","inputSize","includes","units","NetworkBuilder","onLayerUpdate","onLayerDelete","_s","setTotalParams","params","calculateModelParams","sx","p","children","display","justifyContent","alignItems","mb","variant","fileName","_jsxFileName","lineNumber","columnNumber","color","toLocaleString","minHeight","backgroundColor","map","onDelete","onUpdate","id","length","textAlign","py","_c","$RefreshReg$"],"sources":["/home/vibhash/Documents/ERA/Assigment5/frontend/src/components/NetworkBuilder.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Paper, Typography, Box } from '@mui/material';\nimport LayerCard from './LayerCard';\n\nconst calculateLayerDimensions = (layers) => {\n  let dimensions = [];\n  let inputChannels = 1;  // MNIST input channels\n  let currentHeight = 28; // MNIST input height\n  let currentWidth = 28;  // MNIST input width\n\n  layers.forEach((layer, index) => {\n    let inputDim = [inputChannels, currentHeight, currentWidth];\n    let outputDim = [...inputDim];\n    if (layer.type === 'Convolution 2D') {\n      // Parameters in Conv layer = (kernel_size * kernel_size * in_channels * filters) + filters(bias)\n      const kernelParams = layer.defaultParams.kernelSize * layer.defaultParams.kernelSize * \n                          inputChannels * layer.defaultParams.filters;\n      const biasParams = layer.defaultParams.filters;\n      totalParams += kernelParams + biasParams;\n      \n      // Update for next layer\n      inputChannels = layer.defaultParams.filters;\n      currentSize = Math.floor(\n        (currentSize + 2*layer.defaultParams.padding - layer.defaultParams.kernelSize) / \n        layer.defaultParams.stride + 1\n      );\n    } \n    else if (layer.type === 'Max Pooling') {\n      // No parameters in pooling layer\n      currentSize = Math.floor(currentSize / layer.defaultParams.stride);\n    }\n    else if (layer.type === 'Dropout') {\n      // No parameters in dropout layer\n    }\n    else if (layer.type === 'Fully Connected') {\n      let inputSize;\n      if (index === 0 || !layers[index-1].type.includes('Fully Connected')) {\n        // First FC layer after conv/pool layers or at start\n        inputSize = inputChannels * currentSize * currentSize;\n      } else {\n        // FC layer after another FC layer\n        inputSize = layers[index-1].defaultParams.units;\n      }\n      // Parameters in FC layer = (input_size * units) + units(bias)\n      totalParams += (inputSize * layer.defaultParams.units) + layer.defaultParams.units;\n    }\n  });\n\n  return totalParams;\n};\n\nconst NetworkBuilder = ({ layers, onLayerUpdate, onLayerDelete }) => {\n  const [totalParams, setTotalParams] = useState(0);\n\n  useEffect(() => {\n    const params = calculateModelParams(layers);\n    setTotalParams(params);\n  }, [layers]);\n\n  return (\n    <Paper sx={{ p: 2 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h6\">\n          Network Architecture\n        </Typography>\n        <Typography variant=\"subtitle1\" color=\"text.secondary\">\n          Total Parameters: {totalParams.toLocaleString()}\n        </Typography>\n      </Box>\n      <Box sx={{ minHeight: 200, p: 2, backgroundColor: '#f8f8f8' }}>\n        {layers.map((layer, index) => (\n          <LayerCard\n            key={layer.id}\n            layer={layer}\n            onDelete={() => onLayerDelete(index)}\n            onUpdate={(params) => onLayerUpdate(index, params)}\n          />\n        ))}\n        {layers.length === 0 && (\n          <Typography variant=\"body2\" color=\"text.secondary\" textAlign=\"center\" py={4}>\n            Drag and drop layers here to build your network\n          </Typography>\n        )}\n      </Box>\n    </Paper>\n  );\n};\n\nexport default NetworkBuilder; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}