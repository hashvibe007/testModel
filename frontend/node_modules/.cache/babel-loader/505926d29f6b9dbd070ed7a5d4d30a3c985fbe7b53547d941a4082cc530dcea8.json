{"ast":null,"code":"var _jsxFileName = \"/home/vibhash/Documents/ERA/Assigment5/frontend/src/components/TrainingConfig.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Paper, TextField, Button, Select, MenuItem, FormControl, InputLabel, Box, Typography, Alert } from '@mui/material';\nimport { trainModel } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrainingConfig = ({\n  networkLayers,\n  setTrainingResults,\n  isTraining,\n  setIsTraining,\n  setTrainingHistory\n}) => {\n  _s();\n  const [optimizer, setOptimizer] = useState('adam');\n  const [learningRate, setLearningRate] = useState(0.001);\n  const [epochs, setEpochs] = useState(10);\n  const [error, setError] = useState(null);\n  const validateNetwork = () => {\n    if (networkLayers.length === 0) {\n      return \"Please add at least one layer to the network\";\n    }\n\n    // Check layer ordering\n    let hasSeenFC = false;\n    for (let i = 0; i < networkLayers.length; i++) {\n      const layer = networkLayers[i];\n\n      // Once we see a FC layer, we can't have conv or pooling layers after it\n      if (hasSeenFC && (layer.type === 'Convolution 2D' || layer.type === 'Max Pooling')) {\n        return \"Convolutional and Pooling layers must come before Fully Connected layers\";\n      }\n      if (layer.type === 'Fully Connected') {\n        hasSeenFC = true;\n      }\n    }\n\n    // Check if the last layer is Dense with appropriate units for MNIST (10 classes)\n    const lastLayer = networkLayers[networkLayers.length - 1];\n    if (lastLayer.type !== 'Fully Connected' || lastLayer.defaultParams.units !== 10) {\n      return \"The last layer must be a Fully Connected layer with 10 units for MNIST classification\";\n    }\n    return null;\n  };\n  const handleSubmit = async () => {\n    try {\n      const networkError = validateNetwork();\n      if (networkError) {\n        setError(networkError);\n        return;\n      }\n      setIsTraining(true);\n      setError(null);\n      const config = {\n        network_architecture: networkLayers.map(layer => ({\n          type: layer.type,\n          params: layer.defaultParams\n        })),\n        optimizer,\n        learning_rate: learningRate,\n        epochs\n      };\n      const data = await trainModel(config);\n      setTrainingResults(data.results);\n      setTrainingHistory(data.history);\n      setError(null);\n    } catch (err) {\n      setError(\"Training failed: \" + err.message);\n      console.error('Training failed:', err);\n    } finally {\n      setIsTraining(false);\n    }\n  };\n\n  // Clear error when parameters change\n  const handleParameterChange = paramSetter => event => {\n    setError(null);\n    paramSetter(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      p: 3,\n      mb: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Training Configuration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      sx: {\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        children: \"Optimizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        value: optimizer,\n        onChange: handleParameterChange(setOptimizer),\n        label: \"Optimizer\",\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"adam\",\n          children: \"Adam\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"sgd\",\n          children: \"SGD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      label: \"Learning Rate\",\n      type: \"number\",\n      value: learningRate,\n      onChange: handleParameterChange(value => setLearningRate(parseFloat(value))),\n      sx: {\n        mb: 2\n      },\n      inputProps: {\n        min: 0.0001,\n        step: 0.0001\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      label: \"Epochs\",\n      type: \"number\",\n      value: epochs,\n      onChange: handleParameterChange(value => setEpochs(parseInt(value))),\n      sx: {\n        mb: 2\n      },\n      inputProps: {\n        min: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: handleSubmit,\n      disabled: isTraining || networkLayers.length === 0 // Only disable during training or when no layers\n      ,\n      fullWidth: true,\n      children: isTraining ? 'Training...' : 'Start Training'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(TrainingConfig, \"hvJZT9pZZYd6sjKrk1jQmK+8us4=\");\n_c = TrainingConfig;\nexport default TrainingConfig;\nvar _c;\n$RefreshReg$(_c, \"TrainingConfig\");","map":{"version":3,"names":["React","useState","Paper","TextField","Button","Select","MenuItem","FormControl","InputLabel","Box","Typography","Alert","trainModel","jsxDEV","_jsxDEV","TrainingConfig","networkLayers","setTrainingResults","isTraining","setIsTraining","setTrainingHistory","_s","optimizer","setOptimizer","learningRate","setLearningRate","epochs","setEpochs","error","setError","validateNetwork","length","hasSeenFC","i","layer","type","lastLayer","defaultParams","units","handleSubmit","networkError","config","network_architecture","map","params","learning_rate","data","results","history","err","message","console","handleParameterChange","paramSetter","event","target","value","sx","p","mb","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","severity","fullWidth","onChange","label","parseFloat","inputProps","min","step","parseInt","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/vibhash/Documents/ERA/Assigment5/frontend/src/components/TrainingConfig.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Paper,\n  TextField,\n  Button,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Box,\n  Typography,\n  Alert\n} from '@mui/material';\nimport { trainModel } from '../services/api';\n\nconst TrainingConfig = ({ networkLayers, setTrainingResults, isTraining, setIsTraining, setTrainingHistory }) => {\n  const [optimizer, setOptimizer] = useState('adam');\n  const [learningRate, setLearningRate] = useState(0.001);\n  const [epochs, setEpochs] = useState(10);\n  const [error, setError] = useState(null);\n\n  const validateNetwork = () => {\n    if (networkLayers.length === 0) {\n      return \"Please add at least one layer to the network\";\n    }\n    \n    // Check layer ordering\n    let hasSeenFC = false;\n    for (let i = 0; i < networkLayers.length; i++) {\n      const layer = networkLayers[i];\n      \n      // Once we see a FC layer, we can't have conv or pooling layers after it\n      if (hasSeenFC && (layer.type === 'Convolution 2D' || layer.type === 'Max Pooling')) {\n        return \"Convolutional and Pooling layers must come before Fully Connected layers\";\n      }\n      \n      if (layer.type === 'Fully Connected') {\n        hasSeenFC = true;\n      }\n    }\n    \n    // Check if the last layer is Dense with appropriate units for MNIST (10 classes)\n    const lastLayer = networkLayers[networkLayers.length - 1];\n    if (lastLayer.type !== 'Fully Connected' || lastLayer.defaultParams.units !== 10) {\n      return \"The last layer must be a Fully Connected layer with 10 units for MNIST classification\";\n    }\n\n    return null;\n  };\n\n  const handleSubmit = async () => {\n    try {\n      const networkError = validateNetwork();\n      if (networkError) {\n        setError(networkError);\n        return;\n      }\n\n      setIsTraining(true);\n      setError(null);\n\n      const config = {\n        network_architecture: networkLayers.map(layer => ({\n          type: layer.type,\n          params: layer.defaultParams\n        })),\n        optimizer,\n        learning_rate: learningRate,\n        epochs\n      };\n\n      const data = await trainModel(config);\n      setTrainingResults(data.results);\n      setTrainingHistory(data.history);\n      setError(null);\n    } catch (err) {\n      setError(\"Training failed: \" + err.message);\n      console.error('Training failed:', err);\n    } finally {\n      setIsTraining(false);\n    }\n  };\n\n  // Clear error when parameters change\n  const handleParameterChange = (paramSetter) => (event) => {\n    setError(null);\n    paramSetter(event.target.value);\n  };\n\n  return (\n    <Paper sx={{ p: 3, mb: 3 }}>\n      <Typography variant=\"h6\" gutterBottom>\n        Training Configuration\n      </Typography>\n      \n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      <FormControl fullWidth sx={{ mb: 2 }}>\n        <InputLabel>Optimizer</InputLabel>\n        <Select\n          value={optimizer}\n          onChange={handleParameterChange(setOptimizer)}\n          label=\"Optimizer\"\n        >\n          <MenuItem value=\"adam\">Adam</MenuItem>\n          <MenuItem value=\"sgd\">SGD</MenuItem>\n        </Select>\n      </FormControl>\n\n      <TextField\n        fullWidth\n        label=\"Learning Rate\"\n        type=\"number\"\n        value={learningRate}\n        onChange={handleParameterChange((value) => setLearningRate(parseFloat(value)))}\n        sx={{ mb: 2 }}\n        inputProps={{ min: 0.0001, step: 0.0001 }}\n      />\n\n      <TextField\n        fullWidth\n        label=\"Epochs\"\n        type=\"number\"\n        value={epochs}\n        onChange={handleParameterChange((value) => setEpochs(parseInt(value)))}\n        sx={{ mb: 2 }}\n        inputProps={{ min: 1 }}\n      />\n\n      <Button\n        variant=\"contained\"\n        onClick={handleSubmit}\n        disabled={isTraining || networkLayers.length === 0}  // Only disable during training or when no layers\n        fullWidth\n      >\n        {isTraining ? 'Training...' : 'Start Training'}\n      </Button>\n    </Paper>\n  );\n};\n\nexport default TrainingConfig; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}