{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000';\nexport const trainModel = async config => {\n  try {\n    console.log('Sending training config:', config);\n    const response = await fetch(`${API_BASE_URL}/train`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(config)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Training failed');\n    }\n    const data = await response.json();\n    return {\n      results: data.results,\n      history: data.history\n    };\n  } catch (error) {\n    console.error('Training error:', error);\n    throw error;\n  }\n};\nexport const getModelParams = async convLayers => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/model-params?conv_layers=${convLayers.join(',')}`);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Failed to get model parameters');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching model parameters:', error);\n    throw error;\n  }\n};\nexport const getTrainingHistory = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/history`);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Failed to get training history');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching training history:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","trainModel","config","console","log","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","detail","data","results","history","error","getModelParams","convLayers","join","getTrainingHistory"],"sources":["/home/vibhash/Documents/ERA/Assigment5/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000';\n\nexport const trainModel = async (config) => {\n  try {\n    console.log('Sending training config:', config);\n    const response = await fetch(`${API_BASE_URL}/train`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(config),\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Training failed');\n    }\n    \n    const data = await response.json();\n    return {\n      results: data.results,\n      history: data.history\n    };\n  } catch (error) {\n    console.error('Training error:', error);\n    throw error;\n  }\n};\n\nexport const getModelParams = async (convLayers) => {\n  try {\n    const response = await fetch(\n      `${API_BASE_URL}/model-params?conv_layers=${convLayers.join(',')}`\n    );\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Failed to get model parameters');\n    }\n    \n    return response.json();\n  } catch (error) {\n    console.error('Error fetching model parameters:', error);\n    throw error;\n  }\n};\n\nexport const getTrainingHistory = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/history`);\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Failed to get training history');\n    }\n    \n    return response.json();\n  } catch (error) {\n    console.error('Error fetching training history:', error);\n    throw error;\n  }\n}; "],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,UAAU,GAAG,MAAOC,MAAM,IAAK;EAC1C,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,MAAM,CAAC;IAC/C,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,QAAQ,EAAE;MACpDO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,MAAM;IAC7B,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,MAAM,IAAI,iBAAiB,CAAC;IACxD;IAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClC,OAAO;MACLI,OAAO,EAAED,IAAI,CAACC,OAAO;MACrBC,OAAO,EAAEF,IAAI,CAACE;IAChB,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAOC,UAAU,IAAK;EAClD,IAAI;IACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGN,YAAY,6BAA6BsB,UAAU,CAACC,IAAI,CAAC,GAAG,CAAC,EAClE,CAAC;IAED,IAAI,CAAClB,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,MAAM,IAAI,gCAAgC,CAAC;IACvE;IAEA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMI,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACF,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,UAAU,CAAC;IAEvD,IAAI,CAACK,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,MAAM,IAAI,gCAAgC,CAAC;IACvE;IAEA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}